import os
import requests
from tiny_jmap_library import TinyJMAPClient
import logging
import schedule
import time

LINODE_TOKEN = os.environ.get('LINODE_TOKEN')
LINODE_FIREWALL_ID = os.environ.get('LINODE_FIREWALL_ID')
LINODE_LABEL_NAME = os.environ.get('LINODE_LABEL_NAME')

FASTMAIL_TOKEN = os.environ.get('FASTMAIL_TOKEN')
FASTMAIL_FROM = os.environ.get('FASTMAIL_FROM')
FASTMAIL_TO = os.environ.get('FASTMAIL_TO')
FASTMAIL_TO_GREETING = os.environ.get('FASTMAIL_TO_GREETING')


# Enable logging
logging.basicConfig(format='%(asctime)s %(levelname)-8s %(message)s',
                    level=logging.INFO, datefmt='%Y-%m-%d %H:%M:%S')


def sendEmail(oldIpAddress, newIpAddress):
    jmapClient = TinyJMAPClient(
        hostname='api.fastmail.com',
        username=FASTMAIL_FROM,
        token=FASTMAIL_TOKEN
    )

    account_id = jmapClient.get_account_id()
    query_res = jmapClient.make_jmap_call(
        {
            "using": ["urn:ietf:params:jmap:core", "urn:ietf:params:jmap:mail"],
            "methodCalls": [
                [
                    "Mailbox/query",
                    {"accountId": account_id, "filter": {"name": "Drafts"}},
                    "a",
                ]
            ],
        }
    )

    draft_mailbox_id = query_res["methodResponses"][0][1]["ids"][0]
    assert len(draft_mailbox_id) > 0

    body = """
    Hi {}.


    Your IP address has changed from {} to {}.
        
    You will need to update the NGINX Proxy Manager allowlist.


    ---

    Generated by your update-firewall.py.
    """.format(FASTMAIL_TO_GREETING, oldIpAddress, newIpAddress)

    draft = {
        "from": [{"email": FASTMAIL_FROM}],
        "to": [{"email": FASTMAIL_TO}],
        "subject": "Firewall has updated",
        "keywords": {"$draft": True},
        "mailboxIds": {draft_mailbox_id: True},
        "bodyValues": {"body": {"value": body, "charset": "utf-8"}},
        "textBody": [{"partId": "body", "type": "text/plain"}],
    }

    identity_id = jmapClient.get_identity_id()

    create_res = jmapClient.make_jmap_call(
        {
            "using": [
                "urn:ietf:params:jmap:core",
                "urn:ietf:params:jmap:mail",
                "urn:ietf:params:jmap:submission",
            ],
            "methodCalls": [
                ["Email/set", {"accountId": account_id,
                               "create": {"draft": draft}}, "a"],
                [
                    "EmailSubmission/set",
                    {
                        "accountId": account_id,
                        "onSuccessDestroyEmail": ["#sendIt"],
                        "create": {
                            "sendIt": {
                                "emailId": "#draft",
                                "identityId": identity_id,
                            }
                        },
                    },
                    "b",
                ],
            ],
        }
    )


def job():
    logging.info('Running job...')

    hasIpChanged = False
    oldIpAddress = ''

    # Ipify GET
    ipResponse = requests.get('https://api.ipify.org?format=json')

    if ipResponse.status_code == 200:
        ip = requests.get('https://api.ipify.org?format=json').json()['ip']

        # Linode
        firewallResponse = requests.get('https://api.linode.com/v4/networking/firewalls/' +
                                        str(LINODE_FIREWALL_ID) + '/rules', headers={'Authorization': 'Bearer ' + LINODE_TOKEN})

        if firewallResponse.status_code == 200:
            firewall = firewallResponse.json()
            inboundRules = firewall['inbound']

            for inboundRule in inboundRules:
                if LINODE_LABEL_NAME + '-' in inboundRule['label'] and ip not in inboundRule['addresses']['ipv4'][0]:
                    hasIpChanged = True
                    oldIpAddress = inboundRule['addresses']['ipv4'][0].split(
                        '/')[0]
                    inboundRule['addresses']['ipv4'][0] = ip + '/32'

            if hasIpChanged:
                logging.info('Updating Linode firewall, ' + str(LINODE_FIREWALL_ID) +
                             ', with IP from ' + oldIpAddress + ' to ' + ip + ' for label, ' + LINODE_LABEL_NAME)

                updatedFirewallResponse = requests.put('https://api.linode.com/v4/networking/firewalls/' +
                                                       str(LINODE_FIREWALL_ID) + '/rules', headers={'Authorization': 'Bearer ' + LINODE_TOKEN}, json=firewall)
                if updatedFirewallResponse.status_code == 200:
                    logging.info('Sending email...')
                    sendEmail(oldIpAddress, ip)
                    logging.info('Job finished. Firewall has been updated.')
                elif firewallResponse.status_code in [401, 403]:
                    logging.error("api.linode.com (update firewall rules) has an authentication issue. Status: {}".format(
                        str(ipResponse.status_code)))
                elif firewallResponse.status_code in [500, 502, 503, 504]:
                    logging.error("api.linode.com (update firewall rules) has failed due to a server side issue has occurred. Status: {}".format(
                        str(ipResponse.status_code)))
            else:
                logging.info('Job finished. No update.')
        elif firewallResponse.status_code in [401, 403]:
            logging.error("api.linode.com (get firewall rules) has an authentication issue. Status: {}".format(
                str(ipResponse.status_code)))
        elif firewallResponse.status_code in [500, 502, 503, 504]:
            logging.error("api.linode.com (get firewall rules) has failed due to a server side issue has occurred. Status: {}".format(
                str(ipResponse.status_code)))
    elif ipResponse.status_code in [401, 403, 429, 500, 502, 503, 504]:
        logging.error(
            "api.ipify.org has returned an unexpected status. Status: {}".format(str(ipResponse.status_code)))


schedule.every(5).minutes.do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
